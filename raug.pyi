from typing import List


class GraphBuilder:
    def __init__(self) -> None: ...

    def add_output(self) -> Node: ...
    def connect(self, node: Node, output_index: int,
                other: Node, input_index: int) -> None: ...

    def write_dot(self, filename: str) -> None: ...

    def build_runtime(self) -> Runtime: ...

    def print(self) -> Node: ...

    def constant(self, value: float) -> Node: ...
    def message(self, value) -> Node: ...
    def constant_message(self, value) -> Node: ...

    def buffer(self, values: List[float]) -> Node: ...
    def load_buffer(self, name: str) -> Node: ...

    def add_param(self, param: Param) -> Node: ...
    def register(self) -> Node: ...
    def sample_and_hold(self) -> Node: ...

    def sample_rate(self) -> Node: ...

    def phase_accum(self) -> Node: ...
    def sine_osc(self, frequency: float = ...) -> Node: ...
    def saw_osc(self, frequency: float = ...) -> Node: ...
    def bl_saw_osc(self, frequency: float = ...) -> Node: ...
    def bl_square_osc(self, frequency: float = ...,
                      pulse_width: float = ...) -> Node: ...

    def noise_osc(self) -> Node: ...

    def metro(self) -> Node: ...

    def select(self, num_outputs: int) -> Node: ...
    def merge(self, num_inputs: int) -> Node: ...
    def counter(self) -> Node: ...

    def peak_limiter(self, threshold: float = ...,
                     attack: float = ...,
                     release: float = ...) -> Node: ...

    def moog_ladder(self, cutoff: float = ...,
                    resonance: float = ...) -> Node: ...

    def biquad_lowpass(self, cutoff: float = ...,
                       q: float = ...) -> Node: ...

    def biquad_highpass(self, cutoff: float = ...,
                        q: float = ...) -> Node: ...

    def biquad_bandpass(self, cutoff: float = ...,
                        q: float = ...) -> Node: ...

    def biquad_notch(self, cutoff: float = ...,
                     q: float = ...) -> Node: ...

    def biquad_peak(self, cutoff: float = ...,
                    q: float = ..., gain: float = ...) -> Node: ...

    def biquad_lowshelf(self, cutoff: float = ...,
                        q: float = ..., gain: float = ...) -> Node: ...

    def biquad_highshelf(self, cutoff: float = ...,
                         q: float = ..., gain: float = ...) -> Node: ...


class Node:
    def input(self, index) -> Input: ...
    def output(self, index) -> Output: ...
    def make_register(self) -> Node: ...
    def sin(self) -> Node: ...
    def cos(self) -> Node: ...
    def tan(self) -> Node: ...
    def recip(self) -> Node: ...
    def smooth(self) -> Node: ...
    def midi2freq(self) -> Node: ...
    def freq2midi(self) -> Node: ...
    def floor(self) -> Node: ...
    def ceil(self) -> Node: ...
    def round(self) -> Node: ...
    def __add__(self, other) -> Node: ...
    def __sub__(self, other) -> Node: ...
    def __mul__(self, other) -> Node: ...
    def __truediv__(self, other) -> Node: ...
    def __pow__(self, other) -> Node: ...
    def __mod__(self, other) -> Node: ...
    def __neg__(self) -> Node: ...


class Output:
    def connect(self, input: Input) -> None: ...
    def node(self) -> Node: ...
    def make_node(self) -> Node: ...
    def make_register(self) -> Node: ...


class Input:
    def connect(self, output: Output) -> None: ...
    def set(self, value) -> None: ...
    def param(self, name: str) -> Param: ...
    def node(self) -> Node: ...


class Param:
    def __init__(self, name: str) -> None: ...
    def set(self, value) -> None: ...
    def get(self): ...


class Runtime:
    def run_for(self, seconds: float) -> None: ...
    def run(self) -> RuntimeHandle: ...
    def param_names(self) -> List[str]: ...
    def param_named(self, name: str) -> Param: ...


class RuntimeHandle:
    def stop(self) -> None: ...
    def hot_reload(self, graph: GraphBuilder) -> None: ...


class Bang:
    def __init__(self) -> None: ...
