class GraphBuilder:
    def __init__(self) -> None: ...
    def add_output(self) -> Node: ...
    def sample_rate(self) -> Node: ...
    def phase_accum(self) -> Node: ...
    def sine_osc(self) -> Node: ...
    def build_runtime(self) -> Runtime: ...


class Node:
    def __init__(self) -> None: ...
    def input(self, index) -> Input: ...
    def output(self, index) -> Output: ...
    def sin(self) -> Node: ...
    def cos(self) -> Node: ...
    def tan(self) -> Node: ...
    def recip(self) -> Node: ...
    def __add__(self, other) -> Node: ...
    def __sub__(self, other) -> Node: ...
    def __mul__(self, other) -> Node: ...
    def __truediv__(self, other) -> Node: ...
    def __pow__(self, other) -> Node: ...


class Output:
    def __init__(self) -> None: ...
    def connect(self, input: Input) -> None: ...


class Input:
    def __init__(self) -> None: ...
    def connect(self, output: Output) -> None: ...
    def set(self, value) -> None: ...


class Param:
    def __init__(self) -> None: ...
    def set(self, value) -> None: ...
    def get(self): ...


class Runtime:
    def run_for(self, seconds: float) -> None: ...
